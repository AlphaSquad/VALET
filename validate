#!/bin/bash

# exit script if one command fails
set -o errexit

# exit script if Variable is not set
set -o nounset

INPUT=/bbx/mnt/input/biobox.yaml
OUTPUT=/bbx/mnt/output
METADATA=/bbx/mnt/metadata

# Since this script is the entrypoint to your container
# you can access the task in `docker run task` as the first argument
TASK=$1

# Ensure the biobox.yaml file is valid
validate-biobox-file \
  --input ${INPUT} \
  --schema /schema.yaml \

# Use grep to get $TASK in /Taskfile
CMD=$(egrep ^${TASK}: /Taskfile | cut -f 2 -d ':')
if [[ -z ${CMD} ]]; then
  echo "Abort, no task found for '${TASK}'."
  exit 1
fi

# if /bbx/metadata is mounted create log.txt
if [ -d "$METADATA" ]; then
  CMD="($CMD) >& $METADATA/log.txt"
fi

TMP_DIR="${OUTPUT}"

INPUT_JSON="${TMP_DIR}/biobox.json"

$(yaml2json < ${INPUT} > $INPUT_JSON)

ARGUMENTS=$(jq --raw-output '.arguments' $INPUT_JSON )

#get assembly (fasta)
ASSEMBLY=$( echo $ARGUMENTS | jq --raw-output 'select(has("assemblies")) | .assemblies[].path' |  tr '\n' ' ' | xargs | tr ' ' ',')

LABELS=$( echo $ARGUMENTS | jq --raw-output 'select(has("assemblies")) | .assemblies[].id' |  tr '\n' ' ' | xargs | tr ' ' ',')

#get gzipped fastq reads
READS=$( echo $ARGUMENTS | jq --raw-output 'select(has("reads")) | .reads.path')

#get cache
CACHE=$( echo $ARGUMENTS | jq --raw-output 'select(has("cache")) | .cache ' )

#check if cache is defined
if [ ! -z "$CACHE" ]; then
        TMP_DIR=$CACHE
fi

UNZIPPED_READS="${TMP_DIR}/reads.fq"

# Evaluation needs fastq reads
gunzip -c $READS > $UNZIPPED_READS

echo $ASSEMBLY
eval ${CMD}

cat << EOF > ${OUTPUT}/biobox.yaml
version: 0.1.0
results:
  - name: plot
    type: pdf
    inline: false
    value: comparison_plots.pdf
    description: Plots of the different errors
  - name: summary
    type: tsv
    inline: false
    value: asm_0/summary.tsv
    description: all detected errors combined
  - name: library
    type: bam
    value: asm_0/bam/sorted_library.bam
    description: bam library usable by IGV
EOF 
