#!/bin/bash

# exit script if one command fails
set -o errexit

# exit script if Variable is not set
set -o nounset

INPUT=/bbx/mnt/input/biobox.yaml
OUTPUT=/bbx/mnt/output
METADATA=/bbx/mnt/metadata

# Since this script is the entrypoint to your container
# you can access the task in `docker run task` as the first argument
TASK=$1

# Ensure the biobox.yaml file is valid
validate-biobox-file \
  --input ${INPUT} \
  --schema /schema.yaml \

# Use grep to get $TASK in /Taskfile
CMD=$(egrep ^${TASK}: /Taskfile | cut -f 2 -d ':')
if [[ -z ${CMD} ]]; then
  echo "Abort, no task found for '${TASK}'."
  exit 1
fi

# if /bbx/metadata is mounted create log.txt
if [ -d "$METADATA" ]; then
  CMD="($CMD) >& $METADATA/log.txt"
fi

TMP_DIR=$(mktemp -d)

INPUT_JSON="${TMP_DIR}/biobox.json"

$(yaml2json < ${INPUT} > $INPUT_JSON)

ARGUMENTS=$(jq --raw-output '.arguments' $INPUT_JSON )

#get assembly (fasta)
ASSEMBLY=$( echo $ARGUMENTS | jq --raw-output 'select(has("assemblies")) | .assemblies[].path' |  tr '\n' ' ' | xargs | tr ' ' ',')

LABELS=$( echo $ARGUMENTS | jq --raw-output 'select(has("assemblies")) | .assemblies[].id' |  tr '\n' ' ' | xargs | tr ' ' ',')

#get gzipped fastq reads
READS=$( echo $ARGUMENTS | jq --raw-output 'select(has("reads")) | .reads[].path' |  tr '\n' ' ')

# check whether reads are single or paired end
END=$( echo $ARGUMENTS | jq --raw-output 'select(has("reads")) | .reads[].type' |  tr '\n' ' ')

#get cache
CACHE=$( echo $ARGUMENTS | jq --raw-output 'select(has("cache")) | .cache ' |  tr '\n' ' ')

#check if cache is defined
if [ ! -z "$CACHE" ]; then
        TMP_DIR=$CACHE
fi

UNZIPPED_READS=""

# we need reads unzipped (keep name, strip path, extract to tmp)
for f in $READS; do gunzip -c $f > $TMP_DIR$"/"${f##*/}; UNZIPPED_READS=$UNZIPPED_READS$TMP_DIR$"/"${f##*/}$" "; done

SINGLE_ENDED="-r "
PAIRED_1="-1 "
PAIRED_2="-2 "

# sort by single/paired end
READ_ARR=( $UNZIPPED_READS )
I=0
for typ in $END; do
if [ $typ = "single" ]; then
  mv ${READ_ARR[$I]} ${READ_ARR[$I]%.gz} # strip .gz
  SINGLE_ENDED=$SINGLE_ENDED${READ_ARR[$I]%.*}$","
else # can only be paired then
  perl unshuffle.pl -f ${READ_ARR[$I]} -o `pwd` -n ${READ_ARR[$I]%.*} # implicitely strips .gz
  PAIRED_1=$PAIRED_1${READ_ARR[$I]%.*}$".1,"
  PAIRED_2=$PAIRED_2${READ_ARR[$I]%.*}$".2,"
fi
I=$(expr $I + 1)
done

# remove trailing ,
SINGLE_ENDED=${SINGLE_ENDED%,}
PAIRED_1=${PAIRED_1%,}
PAIRED_2=${PAIRED_2%,}

if [ ${SINGLE_ENDED##* } ]; then #only paired
  UNZIPPED_READS=$SINGLE_ENDED
elif [ ${PAIRED_1##* } ]; then #only single ended
  UNZIPPED_READS=$PAIRED_1$" "$PAIRED_2
else
  UNZIPPED_READS=$SINGLE_ENDED$" "$PAIRED_1$" "$PAIRED_2
fi


eval ${CMD}

cat << EOF > ${OUTPUT}/biobox.yaml
version: 0.2.0
results:
  - name: plot
    type: pdf
    inline: false
    value: comparison_plots.pdf
    description: Plots of the different errors
  - name: summary
    type: tsv
    inline: false
    value: asm_0/summary.tsv
    description: all detected errors combined
  - name: library
    type: bam
    value: asm_0/bam/sorted_library.bam
    description: bam library usable by IGV
